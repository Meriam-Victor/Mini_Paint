/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.lab7_minipaint;

import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * @author mohdn
 */
public class DrawingPanel extends javax.swing.JPanel implements DrawingEngine{
    private ArrayList<Shape> shapes ;
    private static int lineCounter,squareCounter,rectCounter,circleCounter;
    
    
    @Override
    public void paintComponent(Graphics g){
            super.paintComponent(g);
            for (Shape shape : shapes){
                shape.draw(g);
            }
        }
        @Override
        public void addShape(Shape shape) {
            this.shapes.add(shape);
            if (shape instanceof LineSegment)
            {
                String name = "L_" + ++lineCounter;
                ((LineSegment) shape).setObjectName(name);               
            }
            else if(shape instanceof Circle )
            {
                String name = "C_" + ++circleCounter;
                ((Circle) shape).setObjectName(name);                               
            }
            else if(shape instanceof Square)
            {
                String name = "S_" + ++squareCounter;
                ((Square) shape).setObjectName(name);                
            }
            else
            {
                String name = "R_" + ++rectCounter;
                ((Rectangle) shape).setObjectName(name); 
            }
        }

        @Override
        public void removeShape(Shape shape) {
            this.shapes.remove(shape);
        }

        @Override
        public Shape[] getShapes() {
            return this.shapes.toArray(new Shape[0]);
        }

        @Override
        public void refresh(Graphics canvas) {
            repaint();
        }
        public Polygons returnByName(String name)
        {
            for (Shape shape : shapes)
            {
                String objname = ((Polygons)shape).getObjectName();
                if(objname.equalsIgnoreCase(name))
                    return ((Polygons)shape);
            }
            
            return null;
        }
    /**
     * Creates new form DrawingPanel
     */
    public DrawingPanel() 
    {
        initComponents();
        shapes = new ArrayList<Shape>();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
